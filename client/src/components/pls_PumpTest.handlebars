
<script src="/chartist/chartist.js"></script>
<script src="/scripts/gridjs.umd.js"></script>
<link rel="stylesheet" href="style/chartist.css" type="text/css">
<style>
.ct-bar {
  /* The width of your bars */
  stroke-width: 20px;
}
.ct-series-a {
  /* Colour of your bars */
  stroke: red;
}
.ct-series-a .ct-area,.ct-series-a .ct-slice-donut-solid,.ct-series-a .ct-slice-pie {
	fill: green;
}

.ct-series-b {
  /* Colour of your bars */
  stroke: green;
}
.ct-series-b .ct-area,.ct-series-b .ct-slice-donut-solid,.ct-series-b .ct-slice-pie {
    fill: #AA0000;
}
</style>

<div  class="dashboard" style="width: 99%; height:99%;display: inline-block;">
	<div class="dashboardRow" style="width: 100%; height: 47%; display: inline-block; background-color: rgb(255, 255, 255);">
		{{!-- First Shift Testing --}}
		<div class="dashboardChart" style="width: 25%; height:100%; display: inline-block; background-color: rgb(255, 255, 255); ">
			<br/>
			<div align='center' class="ChartTitle">Test result totals for 1st Shift</div>
			<br/>
			<div align='center'>
				<div id="FirstShift" class="ct-chart" style="width: 90%; height: 70%;"></div>
			</div>
			<br/>
			<div align='center' >
				Percent Failures&nbsp;
				<div id="Shift1FailedPercent" class="failed" style="display: inline-block">??</div>
				<div align='center' style="display: inline-block">Percent Passes </div>&nbsp;
				<div id="Shift1PassedPercent" class="passed" style="display: inline-block">??</div>
			</div>
			<br/>
			<div align='center'>
				Total Failures&nbsp;
				<div id="Shift1FailedTotal" class="failed" style="display: inline-block">?</div>
				<div align='center' style="display: inline-block">Total Passes </div>&nbsp;
				<div id="Shift1PassedTotal" class="passed" style="display: inline-block">?</div>
			</div>
		</div>
		<div class="dashboardChart" style="width: 46%; height:100%; display: inline-block; background-color: rgb(255, 255, 255);">
			<br>
			<div align='center' class="ChartTitle">Location:{{ParmLocation}} 
				 {{ParmLine}} Production 24 Hour Trend</div>
			<div id="TargetRate" class="ct-chart" style="width: 99%; height: 80%; "></div>
			<div align='center'>  
				<div class="passed">&nbsp;PASSED&nbsp;</div>
				<div class="target">&nbsp;TARGET&nbsp;</div>
				<div class="failed">&nbsp;FAILED&nbsp;</div>
			</div>
		</div>
		<div class="dashboardChart" style="width: 25%; height:100%; display: inline-block; background-color: rgb(255, 255, 255); ">
			<br/>
			<div align='center' class="ChartTitle">Test result totals for 2nd Shift</div>
			<br/>
			<div align='center'>
				<div id="SecondShift" class="ct-chart" style="width: 90%; height: 70%;"></div>
			</div>
			<br/>
			<div align='center' >
				Percent Failures&nbsp;
				<div id="Shift2FailedPercent" class="failed" style="display: inline-block">??</div>
				<div align='center' style="display: inline-block">Percent Passes </div>&nbsp;
				<div id="Shift2PassedPercent" class="passed" style="display: inline-block">??</div>
			</div>
			<br/>
			<div align='center'>
				Total Failures&nbsp;
				<div id="Shift2FailedTotal" class="failed" style="display: inline-block">?</div>
				<div align='center' style="display: inline-block">Total Passes </div>&nbsp;
				<div id="Shift2PassedTotal" class="passed" style="display: inline-block">?</div>
			</div>
		</div>
	</div>
	<div class="dashboardRow" style="width:100%; height: 47%; background-color: rgb(255, 255, 255); ">
		<div class="dashboardChart" style="width: 98%; height:100%; display: inline-block; background-color: rgb(255, 255, 255); ">
			<br/>
			<div align='center' class="ChartTitle">Production Schedule</div>
			<br>
			<div align='center'>
				<div id="JobSchedule" class="ct-chart ct-bar" style="width: 100%; height: 100%; stroke:green;"></div>
			</div>
		{{!-- </div>
		<div class="dashboardChart" style="width: 25%; height:100%; display: inline-block; background-color: rgb(255, 255, 255); ">
			<div align='center' class="ChartTitle">Idle Time</div>
			<div align='center'>
				<div id="IdleTime" style="width: 99%; height: 70%;"></div>
			</div> --}}
		</div>
	</div>
</div>
<script>
	document.title = 'Pump Testing';

	{{!-- var keypress = require('keypress');
	keypress(process.stdin);
	// listen for the "keypress" event
	process.stdin.on('keypress', function (ch, key) {
		console.log('got "keypress"', key);
		if (key && key.ctrl && key.name == 'c') {
			process.stdin.pause();
		}
	});
	
	process.stdin.setRawMode(true);
	process.stdin.resume(); 
	 --}}

	var optionsDonut = {
		width: '300px',
	 	height: '300px',
		donut: true,
		donutWidth: 70,
		chartPadding: 0,
		donutSolid: true,
		showLabel: false
	};
	var optionsLine = {
			showArea: true,
			axisY: {
				onlyInteger: true
			},
			fullWidth: true
	};
	var optionsBar = {
			type: 'bar',
		barWidth: 70,
			axisY: {
				onlyInteger: true
			},
			fullWidth: true,
			fullHeight: true,
			height: '200%'
	};
	
	const rotateMatrix90 = (source,direction) => {
		// get the dimensions of the source matrix
		const M = source.length;
		const N = source[0].length;

		// create a new NxM destination array
		let destination = new Array(N);
		for (let i = 0; i < N; i++) {
			destination[i] = new Array(M);
		}

		// start copying from source into destination
		for (let i = 0; i < N; i++) {
			for (let j = 0; j < M; j++) {
				if (direction == 'right') {
					//right turn (clockwise) 
					destination[i][j] = source[M - j - 1][i];
				} else {
					//left turn (counter clockwise)
					destination[i][j] = source[j][N - i - 1];
				}
			}
		}
		// return the rotated matrix
		return destination;
	};

	const ParmLocation = '{{{ParmLocation}}}';
    const ParmLine = '{{{ParmLine}}}';
	

	// Create charts with data and options (some data passed from app.js)
	//============================= Populate 1st Shift Chart ===========================
	{
		//define chart
		var ChartFirstShift = new Chartist.Pie('#FirstShift',  { labels: [],  series: [] }, optionsDonut);

		function GetShift1Data() { 
			const req1 = new XMLHttpRequest();
			req1.addEventListener("load", reqListener1);
			req1.open("GET", '../../api/TestResultsPump/{{{ParmLocation}}}/{{{ParmLine}}}/Shift1');
			req1.send();

			function reqListener1 () {
				const result = JSON.parse(this.responseText);
				ChartFirstShift.update(result);
				var dataTests = result.series[0] + result.series[1];
				document.getElementById('Shift1FailedPercent').innerHTML = '&nbsp' + Math.round(result.series[1] / (dataTests + .0001) * 1000) / 10 + '%&nbsp';
				document.getElementById('Shift1PassedPercent').innerHTML = '&nbsp' + Math.round(result.series[0] / (dataTests + .0001) * 1000) / 10 + '%&nbsp';
				document.getElementById('Shift1FailedTotal').innerHTML = '&nbsp' + result.series[1] + '&nbsp';
				document.getElementById('Shift1PassedTotal').innerHTML = '&nbsp' + result.series[0] + '&nbsp';
			}
		}
		//initial data get 
		GetShift1Data();

		//Get data using API
		window.setInterval(GetShift1Data, 60000); // How often to get data 
	}

	//=============================== Populate 24 Hour Trend =============================
	{

		//define chart
		var chart24 = new Chartist.Line('#TargetRate',  { labels: [],  series: [] }, optionsLine);

		//initial data get 
		GetTargetRateData();

		window.setInterval(GetTargetRateData, 60000); // How often to get data 

		function GetTargetRateData() {
			const req24 = new XMLHttpRequest();
			req24.addEventListener("load", reqListener24);
			req24.open("GET", '../../api/24HourTrendPump/{{{ParmLocation}}}/{{{ParmLine}}}');
			req24.send();
			
			function reqListener24 () {
				const result = JSON.parse(this.responseText); 
				//console.log("api result:" + result);
				const labels = [];
				let series = [];
				result.forEach(function(row){
					labels.push(Object.values(Object.values(row))[0]);
					series.push([Object.values(Object.values(row))[1],
								Object.values(Object.values(row))[3],
								Object.values(Object.values(row))[2]]);
				});
				//rotate the series 90 degrees counter clockways
				series = rotateMatrix90(series,"left");
				const chartdata = { labels: labels,  series: series };
				//console.log(`Trend JSON:  ` + JSON.stringify(chartdata))
				//var chart24 = new Chartist.Line('#TargetRate', chartdata, optionsLine); 
				chart24.update(chartdata);
			}
		}
	}
	//============================= Populate 2nd Shift Chart ===========================
	{
		//define chart
		var ChartSecondShift = new Chartist.Pie('#SecondShift',  { labels: [],  series: [] }, optionsDonut);
		//initial data get 

		function GetShift2Data() { 
			const req2 = new XMLHttpRequest();
			req2.addEventListener("load", reqListener2);
			req2.open("GET", '../../api/TestResultsPump/{{{ParmLocation}}}/{{{ParmLine}}}/Shift2');
			req2.send();

			function reqListener2 () {
				const result = JSON.parse(this.responseText);
				ChartSecondShift.update(result);
				var dataTests = result.series[0] + result.series[1];
				document.getElementById('Shift2FailedPercent').innerHTML = '&nbsp' + Math.round(result.series[1] / (dataTests + .0001) * 1000) / 10 + '%&nbsp';
				document.getElementById('Shift2PassedPercent').innerHTML = '&nbsp' + Math.round(result.series[0] / (dataTests + .0001) * 1000) / 10 + '%&nbsp';
				document.getElementById('Shift2FailedTotal').innerHTML = '&nbsp' + result.series[1] + '&nbsp';
				document.getElementById('Shift2PassedTotal').innerHTML = '&nbsp' + result.series[0] + '&nbsp';
			}
		}
		GetShift2Data();

		//Get data using API
		window.setInterval(GetShift2Data, 60000); // How often to get data 
	}


	// ============================= Populate Job Schedule Grid ==========================
	{


		function GetJobsSched() { 
			const reqJ = new XMLHttpRequest()
			reqJ.addEventListener("load", reqListenerSched);
			reqJ.open("GET", '../../api/ProductionSchedulePump/{{{ParmLocation}}}/{{{ParmLine}}}');
			reqJ.send();
			
			function reqListenerSched () {
				const result = JSON.parse(this.responseText);
				//console.log("api pump jobs job result:" + JSON.stringify(result));
				const labels = [];
				let series = [];
				result.forEach(function(row){
					series.push([Object.values(Object.values(row))[0],
								Object.values(Object.values(row))[1],
								Object.values(Object.values(row))[2],
								Object.values(Object.values(row))[3],
								Object.values(Object.values(row))[4],
								Object.values(Object.values(row))[5],
								Object.values(Object.values(row))[6],
								Object.values(Object.values(row))[7],
								Object.values(Object.values(row))[8],
								Object.values(Object.values(row))[9],
								Object.values(Object.values(row))[10],
								Object.values(Object.values(row))[11]
								]);
				});
				document.getElementById("JobSchedule").innerHTML = '';
				const grid = new gridjs.Grid({
					columns: ['Seq', 'SDate', 'RDate', 'WO', 'Order', 'Open', 'Sold To','St' ,
					'JDE Item', 'Description', { name: 'MissingParts', attributes: {'width': 425} } , 'F', 'E'],
					data: series
				}).render(document.getElementById("JobSchedule"));
				//grid.on('rowClick', () => toggleCustomerNames() );
			}
		}	
		//initial data get 
		GetJobsSched();

		//Get data using API
		window.setInterval(GetJobsSched, 30000); // How often to get data 	
		}
	//============================ Job Schedule Grid toggle names ========================
	{	
		function toggleCustomerNames () {
			//Not used for JD.  This is just a placeholder currently
			
			const reqJ = new XMLHttpRequest()
			reqJ.addEventListener("load", reqListenerJobsFilter);
			reqJ.open("POST", '../../api/ProductionSchedulePumpFilter/{{{ParmLocation}}}/{{{ParmLine}}}');
			reqJ.send();
			
			function reqListenerJobsFilter () {
				console.log("api result:" + this.responseText);
				refresh();
			}
		}
	}
	// ================================ Other script stuff ===============================
	{
		    window.setInterval('refresh()', 301000); 	// Refresh Everything every 5+ minutes

        // Refresh or reload page.
        function refresh() {
			// Reload everything on page
            window.location.reload();
        }

	{{!-- window.onload = function () {

		const queryString = window.location.search;
		const urlParams = new URLSearchParams(queryString);
		var locatn = urlParams.get('locatn')
		var line = urlParams.get('line')
		try {
			locatn = sessionStorage.getItem('location');
			line = sessionStorage.getItem('line');
		}
		catch (err) {
			//alert('Error: ' + err.message);
		}
		if (!locatn) {
			locatn = "BHGR"
		}
		if (!line) {
			line = 1
		} 
	}--}}
	}
            
            //document.getElementById('PassFailHoulyTitle').innerHTML = locatn + " Line " + line + " Pass/Fail Over 24 Hours";
</script>

