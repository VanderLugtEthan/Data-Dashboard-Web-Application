/**
 * This is a revision of Stephen Grody's PUAssemblyAll dashboard, rewritten by scratch in React
 * This dashboard displays a total amount of passed, failed, and packed packages as a bar graph, and two donut graphs, separated by shifts
 * 
 * @author Ethan VanderLugt
 * @rev 2025-08-05
 * 
 */

// Import useable files into the program. This could be css, js, or any other library full of useable methods
import '../style/chartist.min.css';
import '../style/pls_PUAssemblyAll.css'; // Later imports overwrite earlier ones if any ids or classes match

// NPM Modules can be referenced when importing methods and classes from them (as if they were a javascript library)
import { useEffect, useState } from 'react';

// Importing npm packages of javascript libraries, rather than using the raw js files from our project
import { BarChart, PieChart } from 'chartist';

import axios from 'axios';  // Axios is a newer method of calling APIS that makes handling data much easier to read.

/**
 * React can set return values in functions to be small peices of HTML code
 * 
 * One way to organize these returns is to create a main function to store a root div, 
 * calling other methods to fill in the missing peices. Any javascript processes can be 
 * 
 */

function Dashboard( {parmLocation} ){
    // Set the document title here. YOu can set it elsewhere, but this is easier to read
    document.title = "PU Assembly All"

    // UseState defines a variable with a method called later in the program. The useState call on the right defines it with an intial value (the [])
    const [puAssemblyData, getPUAssemblyData] = useState([]);

    // UseEffect events process after the page is rendered. The page initially renders first, then runs useeffect, making changes to the webpage
    useEffect(() => {
        
        // Refresh method to refresh the page every 5 minutes
        const refreshEvent = setInterval(() => { 
            window.location.reload(); // Refresh the webpage using this method
        }, 300000); // Interval set for every 5 minutes
        
        axios.get(`http://s5003013:3000/api/TestResultsPUAll/${parmLocation}`) // Axios requries a web link sent from our backend
        .then( res => {
            let data = res.data;        // Data contains the return value of the api call
            getPUAssemblyData(data);    // Call this method to update and refresh the variable above
        })
        .catch(function() {
            console.error("Error fetching data from /api/TestResultsPUAll: ");  // Error handler for the useEffect event
        })
        .finally(function() {   // Garbage collection here to avoid memory leaks
            return () => clearInterval(refreshEvent);
        })

    }, [parmLocation])  // useEffect dependencies. If any variable listed here changes their value, the useeffect event will rerun.


    // Return values are paramatized, and formatted like HTML. Some properities are formatted differently (camel case)
    return (
        <div className="dashboard">
            <div className="header">
                <h1>Power Unit Testing and Packing</h1>
            </div>
            
            {/* Below is a call to javascript methods in the jsx code. the value to the right of the call are definining its parameters */}
            <div className="dashboardContent">
                
                {/* Method that generates the bar graph shown on the top of the screen is called here */}
                <ByBar data={puAssemblyData}/>
                <br/>
                
                {/* The sums are generated by this method */}
                <BySum data={puAssemblyData}/>
                <br/>
                
                {/* The gauges are generated by this method */}
                <ByDonut data={puAssemblyData}/> 
            </div>
        </div>
    )
}

// This function will generate the massive bar graph on the top of the website
function ByBar( {data} ){
    
    // Configure the properies of the bar graph
    const barOptions = {
        stackBars: false,
        horizontalBars: false,
        chartPadding: 40,
		seriesBarDistance: 25, // Ethan: Needed to prevent overlapping on the bar graph
		axisY: {
			onlyInteger: true
		},
		showLabel: true
    };

    // Define labels and series below
    let labels = [];
    let series = [];

    let passed = [];
    let failed = [];
    let packed = [];

    let linkString = '';

    // Add all of the labels and series necessary for the coming bar graph. chartData must be defined first.
    data.forEach(row => {
        const lineNumber = parseInt(row.Line, 10);
        labels.push(' Line ' + row.Line);
        if (row.Shift === 1)
            linkString += '<a href="http://s5003013:3000/pls_PUAssembly/BHGR/' + lineNumber + '" target="_new"> Line ' + lineNumber + '</a>&nbsp;&nbsp;&nbsp;' 
        passed.push(row.Passed);
        failed.push(row.Failed);
        packed.push(row.Packed);
    });
    
    series.push(passed, failed, packed);
    
    // Use effect is needed so that this code runs after the page is structure. Otherwise, an empty bar graph is generated
    if (data.length > 0)
        new BarChart('#ChartBar', {labels, series}, barOptions);

    // HTML Code is returned here. Imagine this overlayed over the method call, and this is what you get.
    return (
        <div className='mainChartContainer'>
            <div id='ChartBar' className='ChartBar'></div>
            {/* dangerouslySetInnerHTML converts an HTML string into an actual markup for the webpage */}
            <div dangerouslySetInnerHTML={{__html: linkString}} className="linkString"></div>
        </div>
    )

}

// This method shows to the user the summarized power unit quantities and pass/fail rates (as well as packed units)
function BySum( {data} ) {

    // Summarize all of the shifts and their proper values
    // passed1, failed1, packed1, passed2, failed2, packed2.
    let sums = [0, 0, 0, 0, 0, 0];

    data.forEach(function(row) {     
        // Add up all of the values from the database to display to the user
        if (row.Shift === 1) {
            sums[0] += row.Passed;
            sums[1] += row.Failed;
            sums[2] += row.Packed;
        } 
        else {
            sums[3] += row.Passed;
            sums[4] += row.Failed;
            sums[5] += row.Packed;
        }
    })

    // Returns all of the HTML code as it was on the previous page. Variables are now passed sepearted by brackets instead of encased in a string
    return(
        <div className="totalCount"> 
            <div className="totalCountWrapper">
                <h3 className="label">&nbsp;Shift 1&nbsp;</h3> 
                <div className="passed" id="passed1">&nbsp;PASSED {sums[0]}&nbsp;</div>
                <div className="failed" id="failed1">&nbsp;FAILED {sums[1]}&nbsp;</div>
                <div className="packed" id="packed1">&nbsp;PACKED {sums[2]}&nbsp;</div>
            </div>
            <div className="totalCountWrapper">
                <h3 className="label">&nbsp;Shift 2&nbsp;</h3>
                <div className="passed">&nbsp;PASSED {sums[3]}&nbsp;</div>
                <div className="failed">&nbsp;FAILED {sums[4]}&nbsp;</div>
                <div className="packed">&nbsp;PACKED {sums[5]}&nbsp;</div>
            </div>
        </div>
    )
}

function ByDonut( {data} ){
    
    // Options for the donut graph remain identical to the previous program
    const optionsGuage = {
		width: '300px',
	 	height: '300px',
		donut: true,
		donutWidth: 70,
		startAngle: 270,
		total: 4400,
		chartPadding: 0,
		showLabel: true
	};

    // Sums for the packed merchandise for each shift
    let packed1 = 0;
    let packed2 = 0;
    data.forEach(function(row){
        if (row.Shift === 1)
            packed1 += row.Packed;
        else
            packed2 += row.Packed;
    })

    // Similar to how data was generated above, there must be data to generate a pie chart
    if (data.length > 0){
        new PieChart('#ChartPackedShift1',  {   series: [packed1, 2200 - packed1] }, optionsGuage);
        new PieChart('#ChartPackedShift2',  {   series: [packed2, 2200 - packed2] }, optionsGuage);
    }

    // Both donut graphs appear here
    return (
        <div className='gaugeRow'>
            <div className="gaugeContainer" align="center">
                <div id="Packed1Title"><h3>Shift 1 Packed</h3></div>
                <div id="ChartPackedShift1" className="ct-chart"></div>
            </div>
            <div className="gaugeContainer" align="center">
                <div id="Packed2Title"><h3>Shift 2 Packed</h3></div>
                <div id="ChartPackedShift2" className="ct-chart"></div>
            </div>
        </div>
    )
}

// One method must be exported from the class by default to present to the main program (index.js)
export default Dashboard;